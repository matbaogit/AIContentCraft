import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Copy, ExternalLink, CheckCircle, AlertCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { useState } from "react";

export default function FacebookAppSetup() {
  const { toast } = useToast();
  const [completedSteps, setCompletedSteps] = useState<string[]>([]);

  const copyToClipboard = (text: string, label: string) => {
    navigator.clipboard.writeText(text);
    toast({
      title: "ƒê√£ sao ch√©p",
      description: `${label} ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard`
    });
  };

  const markStepCompleted = (stepId: string) => {
    if (!completedSteps.includes(stepId)) {
      setCompletedSteps([...completedSteps, stepId]);
    }
  };

  const redirectUri = `${window.location.protocol}//${window.location.host}/api/auth/facebook/callback`;

  const requiredFields = [
    {
      id: "app-icon",
      title: "Bi·ªÉu t∆∞·ª£ng ·ª©ng d·ª•ng (1024 x 1024)",
      description: "Logo c·ªßa ·ª©ng d·ª•ng v·ªõi k√≠ch th∆∞·ªõc ch√≠nh x√°c 1024x1024 pixel",
      action: "T·∫°o/Upload logo",
      details: [
        "K√≠ch th∆∞·ªõc: 1024 x 1024 pixel",
        "ƒê·ªãnh d·∫°ng: PNG ho·∫∑c JPG",
        "Ch·∫•t l∆∞·ª£ng cao, kh√¥ng b·ªã m·ªù",
        "N·ªÅn trong su·ªët (khuy·∫øn ngh·ªã)"
      ]
    },
    {
      id: "privacy-policy",
      title: "URL ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞",
      description: "Link ƒë·∫øn trang ch√≠nh s√°ch b·∫£o m·∫≠t c·ªßa ·ª©ng d·ª•ng",
      action: "S·ª≠ d·ª•ng URL c√≥ s·∫µn",
      details: [
        "‚úÖ Trang ƒë√£ ƒë∆∞·ª£c t·∫°o s·∫µn t·∫°i: /privacy-policy",
        `üîó URL ƒë·∫ßy ƒë·ªß: ${window.location.protocol}//${window.location.host}/privacy-policy`,
        "N·ªôi dung ƒë·∫ßy ƒë·ªß v·ªÅ vi·ªác x·ª≠ l√Ω d·ªØ li·ªáu ng∆∞·ªùi d√πng",
        "Bao g·ªìm th√¥ng tin v·ªÅ Facebook data usage"
      ]
    },
    {
      id: "data-deletion",
      title: "X√≥a d·ªØ li·ªáu ng∆∞·ªùi d√πng",
      description: "URL ho·∫∑c h∆∞·ªõng d·∫´n cho ph√©p ng∆∞·ªùi d√πng x√≥a d·ªØ li·ªáu",
      action: "S·ª≠ d·ª•ng URL c√≥ s·∫µn",
      details: [
        "‚úÖ Trang ƒë√£ ƒë∆∞·ª£c t·∫°o s·∫µn t·∫°i: /data-deletion",
        `üîó URL ƒë·∫ßy ƒë·ªß: ${window.location.protocol}//${window.location.host}/data-deletion`,
        "Form x·ª≠ l√Ω y√™u c·∫ßu x√≥a d·ªØ li·ªáu t·ª± ƒë·ªông",
        "Backup: email privacy@seoaiwriter.com"
      ]
    },
    {
      id: "category",
      title: "H·∫°ng m·ª•c ·ª©ng d·ª•ng",
      description: "Ch·ªçn danh m·ª•c ph√π h·ª£p cho ·ª©ng d·ª•ng",
      action: "Ch·ªçn category",
      details: [
        "Business and Pages",
        "Productivity", 
        "Social Media Management",
        "Marketing Tools"
      ]
    }
  ];

  const setupSteps = [
    {
      id: "basic-info",
      title: "1. C·∫•u h√¨nh th√¥ng tin c∆° b·∫£n",
      items: [
        "App Name: SEO AI Writer",
        "App Description: AI-powered content creation and social media management platform",
        "Contact Email: admin@your-domain.com"
      ]
    },
    {
      id: "oauth-settings",
      title: "2. C·∫•u h√¨nh OAuth Settings",
      items: [
        `Valid OAuth Redirect URIs: ${redirectUri}`,
        "Client OAuth Settings: Web",
        "Login v·ªõi Facebook: Enabled"
      ]
    },
    {
      id: "permissions",
      title: "3. Y√™u c·∫ßu Permissions",
      items: [
        "public_profile - ƒê·ªÉ truy c·∫≠p th√¥ng tin profile c∆° b·∫£n",
        "email - ƒê·ªÉ l·∫•y ƒë·ªãa ch·ªâ email ng∆∞·ªùi d√πng",
        "L∆∞u √Ω: C√°c permissions kh√°c c·∫ßn App Review t·ª´ Facebook"
      ]
    }
  ];

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center gap-3">
        <h1 className="text-2xl font-bold">Facebook App Setup Guide</h1>
        <Badge variant="outline">Required for OAuth</Badge>
      </div>

      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>
          Facebook y√™u c·∫ßu c√°c th√¥ng tin n√†y ƒë·ªÉ app c√≥ th·ªÉ ho·∫°t ƒë·ªông trong production mode. 
          Hi·ªán t·∫°i app ƒëang ·ªü development mode n√™n ch·ªâ admin c√≥ th·ªÉ test.
        </AlertDescription>
      </Alert>

      {/* Required Fields */}
      <Card>
        <CardHeader>
          <CardTitle>C√°c tr∆∞·ªùng b·∫Øt bu·ªôc c·∫ßn b·ªï sung</CardTitle>
          <CardDescription>Facebook y√™u c·∫ßu c√°c th√¥ng tin sau ƒë·ªÉ ph√™ duy·ªát app</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {requiredFields.map((field) => (
            <div key={field.id} className="border rounded-lg p-4">
              <div className="flex items-start justify-between mb-3">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    <h3 className="font-medium">{field.title}</h3>
                    {completedSteps.includes(field.id) && (
                      <CheckCircle className="h-4 w-4 text-green-500" />
                    )}
                  </div>
                  <p className="text-sm text-gray-600 dark:text-gray-400">{field.description}</p>
                </div>
                <Button
                  size="sm"
                  variant={completedSteps.includes(field.id) ? "outline" : "default"}
                  onClick={() => markStepCompleted(field.id)}
                >
                  {completedSteps.includes(field.id) ? "Completed" : field.action}
                </Button>
              </div>
              
              <div className="space-y-1">
                {field.details.map((detail, index) => (
                  <div key={index} className="text-sm text-gray-500 dark:text-gray-400 flex items-center gap-2">
                    <div className="w-1 h-1 bg-gray-400 rounded-full" />
                    <span className="flex-1">{detail}</span>
                    {detail.includes('URL ƒë·∫ßy ƒë·ªß:') && (
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => {
                          const url = detail.split('URL ƒë·∫ßy ƒë·ªß: ')[1];
                          copyToClipboard(url, 'URL');
                        }}
                        className="ml-2"
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Setup Steps */}
      <Card>
        <CardHeader>
          <CardTitle>C√°c b∆∞·ªõc c·∫•u h√¨nh Facebook App</CardTitle>
          <CardDescription>H∆∞·ªõng d·∫´n chi ti·∫øt t·ª´ng b∆∞·ªõc</CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {setupSteps.map((step) => (
            <div key={step.id} className="border rounded-lg p-4">
              <h3 className="font-medium mb-3">{step.title}</h3>
              <div className="space-y-2">
                {step.items.map((item, index) => (
                  <div key={index} className="flex items-center gap-2 text-sm">
                    <div className="w-1 h-1 bg-blue-500 rounded-full" />
                    <span className="font-mono text-xs bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">
                      {item}
                    </span>
                    {item.includes(redirectUri) && (
                      <Button
                        size="sm"
                        variant="ghost"
                        onClick={() => copyToClipboard(redirectUri, 'Redirect URI')}
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </CardContent>
      </Card>

      {/* Privacy Policy Template */}
      <Card>
        <CardHeader>
          <CardTitle>Template Privacy Policy</CardTitle>
          <CardDescription>M·∫´u ch√≠nh s√°ch quy·ªÅn ri√™ng t∆∞ cho Facebook App</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="p-4 bg-gray-50 dark:bg-gray-900 rounded-lg text-sm space-y-2">
            <p><strong>Privacy Policy for SEO AI Writer</strong></p>
            <p>Last updated: {new Date().toLocaleDateString('vi-VN')}</p>
            <br />
            <p><strong>1. Data Collection</strong></p>
            <p>We collect Facebook Page access tokens to enable content posting to your Facebook Pages.</p>
            <br />
            <p><strong>2. Data Usage</strong></p>
            <p>Facebook data is used solely for posting content to your authorized Pages and reading engagement metrics.</p>
            <br />
            <p><strong>3. Data Storage</strong></p>
            <p>Access tokens are stored securely and can be deleted by the user at any time.</p>
            <br />
            <p><strong>4. Data Deletion</strong></p>
            <p>Users can request data deletion by contacting admin@your-domain.com</p>
          </div>
          <Button
            className="mt-3"
            variant="outline"
            onClick={() => copyToClipboard(
              "Privacy Policy template copied - customize it for your domain",
              "Privacy Policy Template"
            )}
          >
            <Copy className="h-4 w-4 mr-2" />
            Copy Template
          </Button>
        </CardContent>
      </Card>

      {/* Quick Links */}
      <Card>
        <CardHeader>
          <CardTitle>Quick Links</CardTitle>
          <CardDescription>C√°c link h·ªØu √≠ch cho vi·ªác setup</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-wrap gap-3">
            <Button
              variant="outline"
              onClick={() => window.open('https://developers.facebook.com/apps/', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              Facebook Console
            </Button>
            <Button
              variant="outline"
              onClick={() => window.open('https://www.canva.com/', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              Canva (T·∫°o Logo)
            </Button>
            <Button
              variant="outline"
              onClick={() => window.open('https://privacypolicygenerator.info/', '_blank')}
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              Privacy Policy Generator
            </Button>
          </div>
        </CardContent>
      </Card>

      <Alert>
        <CheckCircle className="h-4 w-4" />
        <AlertDescription>
          Sau khi ho√†n th√†nh t·∫•t c·∫£ y√™u c·∫ßu, b·∫°n c√≥ th·ªÉ submit app ƒë·ªÉ Facebook review. 
          Qu√° tr√¨nh review th∆∞·ªùng m·∫•t 3-7 ng√†y l√†m vi·ªác.
        </AlertDescription>
      </Alert>
    </div>
  );
}