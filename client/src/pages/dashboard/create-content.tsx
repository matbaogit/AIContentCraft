import { useState, useRef, useEffect, useCallback } from "react";
import { DashboardLayout } from "@/components/dashboard/Layout";
import { useLanguage } from "@/hooks/use-language";
import { useDbTranslations } from "@/hooks/use-db-translations";
import { useAuth } from "@/hooks/use-auth";
import { useMutation } from "@tanstack/react-query";
import { apiRequest } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { useCreditCache } from "@/hooks/use-credit-cache";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Checkbox } from "@/components/ui/checkbox";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import ReactQuill from 'react-quill';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Card,
  CardContent,
} from "@/components/ui/card";
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/ui/dialog";
import { z } from "zod";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
  FormDescription,
} from "@/components/ui/form";
import { 
  Copy, 
  Download, 
  ExternalLink, 
  Pencil, 
  AlertCircle, 
  KeyRound,
  Globe,
  List, 
  FileText,
  Book,
  Paintbrush,
  BookOpenText, 
  PaintBucket, 
  AlignJustify,
  Image,
  Link as LinkIcon,
  X,
  Plus,
  Trash2,
  Bold,
  Italic,
  ListOrdered,
  Heading2
} from "lucide-react";
import { GenerateContentRequest, GenerateContentResponse } from "@shared/types";
import { copyToClipboard, downloadAsFile } from "@/lib/utils";
import Head from "@/components/head";
import { CreditConfirmationModal } from "@/components/CreditConfirmationModal";

const formSchema = z.object({
  contentType: z.enum(["blog", "product", "news", "social"]),
  keywords: z.string().min(3, {
    message: "T·ª´ kh√≥a ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±.",
  }),
  length: z.enum(["short", "medium", "long", "extra_long"]),
  tone: z.enum(["professional", "conversational", "informative", "persuasive", "humorous", "neutral"]),
  prompt: z.string().optional(),
  addHeadings: z.boolean().default(true),
  useBold: z.boolean().default(true),
  useItalic: z.boolean().default(true),
  useBullets: z.boolean().default(true),
  relatedKeywords: z.string().optional(),
  language: z.enum(["vietnamese", "english"]).optional(),
  country: z.enum(["vietnam", "us", "global"]).optional(),
  perspective: z.enum(["auto", "first", "second", "third"]).optional(),
  complexity: z.enum(["auto", "basic", "intermediate", "advanced"]).optional(),
  useWebResearch: z.boolean().default(true),
  refSources: z.string().optional(),
  aiModel: z.enum(["chatgpt", "gemini", "claude"]).optional(),
  linkItems: z.array(
    z.object({
      keyword: z.string().optional(),
      url: z.string().optional()
    })
  ).default([]),
  imageSize: z.enum(["small", "medium", "large"]).default("medium"),
  generateImages: z.boolean().default(true),
});

type FormValues = z.infer<typeof formSchema>;

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu cho m·ª•c d√†n √Ω
type OutlineItem = {
  id: string;
  level: 'h2' | 'h3' | 'h4';
  text: string;
};

export default function CreateContent() {
  const { t } = useLanguage();
  const { t: tDb } = useDbTranslations();
  const { user } = useAuth();
  const { toast } = useToast();
  const { invalidateCreditHistory } = useCreditCache();
  const [generatedContent, setGeneratedContent] = useState<GenerateContentResponse | null>(null);
  const [outlineItems, setOutlineItems] = useState<OutlineItem[]>([]);
  const [currentHeadingText, setCurrentHeadingText] = useState("");
  const [currentHeadingLevel, setCurrentHeadingLevel] = useState<'h2' | 'h3' | 'h4'>('h2');
  const [isContentDialogOpen, setIsContentDialogOpen] = useState(false);
  const [editedContent, setEditedContent] = useState("");
  const [editedTitle, setEditedTitle] = useState("");
  const [isSavingArticle, setIsSavingArticle] = useState(false);
  
  // Kh·ªüi t·∫°o linkItems ban ƒë·∫ßu
  const [isLinkItemsInitialized, setIsLinkItemsInitialized] = useState(false);
  
  // Credit confirmation modal states
  const [showCreditModal, setShowCreditModal] = useState(false);
  const [pendingFormData, setPendingFormData] = useState<FormValues | null>(null);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      contentType: "blog",
      keywords: "",
      length: "medium",
      tone: "conversational",
      prompt: "",
      addHeadings: true,
      useBold: true,
      useItalic: true,
      useBullets: true,
      relatedKeywords: "",
      language: "vietnamese",
      country: "vietnam",
      perspective: "auto",
      complexity: "auto",
      useWebResearch: true,
      refSources: "",
      aiModel: "chatgpt",
      linkItems: [],
      imageSize: "medium",
      generateImages: true,
    },
    mode: "onSubmit",
  });
  
  // Effect para inicializar os itens de link quando carrega o componente
  useEffect(() => {
    const tabs = document.querySelectorAll('[role="tab"]');
    const linksTab = Array.from(tabs).find(tab => tab.textContent?.includes('Li√™n k·∫øt'));
    
    // Adiciona um listener ao tab de links
    linksTab?.addEventListener('click', initializeLinkItems);
    
    return () => {
      linksTab?.removeEventListener('click', initializeLinkItems);
    };
  }, []);

  const generateContentMutation = useMutation({
    mutationFn: async (data: GenerateContentRequest) => {
      // Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
      toast({
        title: "ƒêang t·∫°o n·ªôi dung",
        description: "Vui l√≤ng ƒë·ª£i trong khi h·ªá th·ªëng t·∫°o n·ªôi dung c·ªßa b·∫°n...",
      });
      
      const responseData = await apiRequest("POST", "/api/dashboard/generate-content", data);
      if (!responseData.success) {
        throw new Error(responseData.error || "Failed to generate content");
      }
      return responseData.data as GenerateContentResponse;
    },
    onSuccess: async (data) => {
      // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu t·ª´ webhook v√† tr√≠ch xu·∫•t ƒë√∫ng c√°ch
      console.log("Data structure from webhook:", JSON.stringify(data, null, 2));
      
      // X·ª≠ l√Ω content
      let content;
      if (Array.isArray(data) && data.length > 0 && data[0].articleContent) {
        // Tr∆∞·ªùng h·ª£p data l√† array (ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ m·ªôt s·ªë lo·∫°i webhook)
        content = data[0].articleContent;
      } else if (data.articleContent) {
        // Tr∆∞·ªùng h·ª£p data l√† object c√≥ articleContent
        content = data.articleContent;
      } else {
        // M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng content
        content = data.content || "<p>Kh√¥ng c√≥ n·ªôi dung</p>";
      }
      
      // X·ª≠ l√Ω title - l√†m s·∫°ch v√† ƒë·ªãnh d·∫°ng ti√™u ƒë·ªÅ
      let title;
      if (Array.isArray(data) && data.length > 0 && data[0].aiTitle) {
        // Tr∆∞·ªùng h·ª£p data l√† array
        title = data[0].aiTitle.replace(/[\r\n\t]+/g, ' ').trim();
      } else if (data.aiTitle) {
        // Tr∆∞·ªùng h·ª£p data l√† object c√≥ aiTitle
        title = data.aiTitle.replace(/[\r\n\t]+/g, ' ').trim();
      } else {
        // S·ª≠ d·ª•ng title n·∫øu kh√¥ng c√≥ aiTitle
        title = data.title || "B√†i vi·∫øt m·ªõi";
      }
      
      console.log("Webhook response data:", data);
      console.log("Using title from webhook:", title);
      
      // L∆∞u b√†i vi·∫øt ngay khi t·∫°o th√†nh c√¥ng
      try {
        // L∆∞u n·ªôi dung v√†o database v·ªõi gi√° tr·ªã t·ª´ webhook
        console.log("Saving article with title:", title);
        
        // X·ª≠ l√Ω keywords - ƒë·∫£m b·∫£o ƒë√∫ng ƒë·ªãnh d·∫°ng
        let keywords;
        if (Array.isArray(data.keywords)) {
          keywords = data.keywords.join(", ");
        } else if (typeof data.keywords === 'string') {
          keywords = data.keywords;
        } else {
          // M·∫∑c ƒë·ªãnh s·ª≠ d·ª•ng keywords t·ª´ form n·∫øu kh√¥ng c√≥
          keywords = form.getValues().keywords;
        }
        
        // AUTO-SAVE AS DRAFT: T·ª± ƒë·ªông l∆∞u b·∫£n nh√°p
        console.log("üîÑ [AUTO-SAVE DRAFT] Saving article as draft...");
        
        // Extract credits used for saving
        let creditsUsedForSave = 1; // Default fallback
        if (data.creditsUsed) {
          creditsUsedForSave = data.creditsUsed;
        } else if (Array.isArray(data) && data.length > 0 && data[0].creditsUsed) {
          creditsUsedForSave = data[0].creditsUsed;
        }
        
        const saveResponse = await apiRequest("POST", "/api/dashboard/articles", {
          title: title,
          content: content,
          keywords: keywords,
          creditsUsed: creditsUsedForSave,
          status: 'draft' // L∆∞u l√†m b·∫£n nh√°p
        });
        
        const savedArticle = await saveResponse.json();
        
        // C·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªõi ID b√†i vi·∫øt ƒë√£ l∆∞u
        console.log("Draft auto-save result:", savedArticle);
        if (savedArticle.success && savedArticle.data) {
          console.log("‚úì Draft auto-save th√†nh c√¥ng, articleId:", savedArticle.data.id);
          console.log("üîÑ [DRAFT AUTO-SAVE SUCCESS] setGeneratedContent with articleId:", savedArticle.data.id);
          setGeneratedContent({
            ...data,
            title: title,
            content: content,
            articleId: savedArticle.data.id // L∆∞u ID b√†i vi·∫øt ƒë·ªÉ c·∫≠p nh·∫≠t sau n√†y
          });
        } else {
          console.log("‚úó Draft auto-save th·∫•t b·∫°i, kh√¥ng c√≥ articleId");
          console.log("üîÑ [DRAFT AUTO-SAVE FAIL] setGeneratedContent WITHOUT articleId");
          setGeneratedContent({
            ...data,
            title: title,
            content: content
          });
        }
      } catch (error) {
        console.error("Kh√¥ng th·ªÉ l∆∞u b·∫£n nh√°p t·ª± ƒë·ªông:", error);
        console.log("üîÑ [DRAFT AUTO-SAVE ERROR] setGeneratedContent WITHOUT articleId due to error");
        setGeneratedContent({
          ...data,
          title: title,
          content: content
        });
      }
      
      // Hi·ªÉn th·ªã ti√™u ƒë·ªÅ v√† n·ªôi dung t·ª´ webhook trong dialog
      // ƒê·∫£m b·∫£o hi·ªÉn th·ªã aiTitle t·ª´ webhook trong tr∆∞·ªùng ti√™u ƒë·ªÅ
      console.log("Setting edited title to:", title);
      if (title && title.trim() !== '') {
        setEditedTitle(title);
      } else {
        setEditedTitle("B√†i vi·∫øt m·ªõi");
      }
      
      // C·∫≠p nh·∫≠t n·ªôi dung t·ª´ articleContent ho·∫∑c content
      if (content && content.trim() !== '') {
        setEditedContent(content);
      } else {
        setEditedContent("<p>Nh·∫≠p n·ªôi dung b√†i vi·∫øt c·ªßa b·∫°n ·ªü ƒë√¢y...</p>");
      }
      
      // Hi·ªÉn th·ªã dialog ch·ªânh s·ª≠a
      setIsContentDialogOpen(true);
      
      // Extract credits used from the response structure
      // Log response structure to debug
      console.log('Response data structure:', data);
      
      let creditsUsed = 1; // Default fallback
      if (data.creditsUsed) {
        creditsUsed = data.creditsUsed;
      } else if (Array.isArray(data) && data.length > 0 && data[0].creditsUsed) {
        creditsUsed = data[0].creditsUsed;
      }
      
      console.log('Credits used extracted:', creditsUsed);
      console.log('Full response data for debugging:', {
        creditsUsed: data.creditsUsed,
        actualUsed: creditsUsed
      });
      
      toast({
        title: "ƒê√£ t·∫°o n·ªôi dung th√†nh c√¥ng",
        description: `ƒê√£ s·ª≠ d·ª•ng ${creditsUsed} t√≠n d·ª•ng v√† l∆∞u b·∫£n nh√°p t·ª± ƒë·ªông`,
      });

      // Invalidate credit history cache
      invalidateCreditHistory();
    },
    onError: (error: Error) => {
      toast({
        title: "Kh√¥ng th·ªÉ t·∫°o n·ªôi dung",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  // Function to calculate credit breakdown
  const calculateCreditBreakdown = (data: FormValues) => {
    const breakdown = [];
    let totalCredits = 0;

    // Content length credits
    let contentCredits = 1;
    switch (data.length) {
      case 'short':
        contentCredits = 1;
        break;
      case 'medium':
        contentCredits = 3;
        break;
      case 'long':
        contentCredits = 5;
        break;
      case 'extra_long':
        contentCredits = 8;
        break;
    }
    
    const lengthLabels = {
      'short': 'N·ªôi dung ng·∫Øn',
      'medium': 'N·ªôi dung trung b√¨nh', 
      'long': 'N·ªôi dung d√†i',
      'extra_long': 'N·ªôi dung r·∫•t d√†i'
    };
    
    breakdown.push({
      label: lengthLabels[data.length],
      credits: contentCredits,
      color: 'default' as const
    });
    totalCredits += contentCredits;

    // AI Model credits
    if (data.aiModel) {
      let aiCredits = 1;
      const aiLabels = {
        'chatgpt': 'ChatGPT AI',
        'gemini': 'Gemini AI',
        'claude': 'Claude AI'
      };
      
      switch (data.aiModel) {
        case 'chatgpt':
          aiCredits = 1;
          break;
        case 'gemini':
          aiCredits = 1;
          break;
        case 'claude':
          aiCredits = 2;
          break;
      }
      
      breakdown.push({
        label: aiLabels[data.aiModel],
        credits: aiCredits,
        color: 'secondary' as const
      });
      totalCredits += aiCredits;
    }

    // Image generation credits
    if (data.generateImages) {
      // Estimate image count (default logic from backend)
      let imageCount = 1;
      if (data.length === 'short') imageCount = 1;
      else if (data.length === 'medium') imageCount = 2;
      else if (data.length === 'long') imageCount = 3;
      else if (data.length === 'extra_long') imageCount = 4;
      
      const imageCredits = imageCount * 2; // 2 credits per image
      
      breakdown.push({
        label: `T·∫°o ${imageCount} h√¨nh ·∫£nh`,
        credits: imageCredits,
        color: 'outline' as const
      });
      totalCredits += imageCredits;
    }

    return { breakdown, totalCredits };
  };

  const onSubmit = (data: FormValues) => {
    console.log("onSubmit triggered", data);
    
    // Ki·ªÉm tra t·ª´ kh√≥a tr∆∞·ªõc
    if (!data.keywords || data.keywords.trim() === '') {
      toast({
        title: "Thi·∫øu t·ª´ kh√≥a",
        description: "Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt t·ª´ kh√≥a",
        variant: "destructive",
      });
      return;
    }
    
    // Calculate credit breakdown
    const { breakdown, totalCredits } = calculateCreditBreakdown(data);
    
    // Store form data for later use
    setPendingFormData(data);
    
    // Show credit confirmation modal
    setShowCreditModal(true);
  };

  // Function to actually submit after credit confirmation
  const confirmAndSubmit = () => {
    if (!pendingFormData) return;
    
    setShowCreditModal(false);
    
    // Show processing toast
    toast({
      title: "ƒêang t·∫°o n·ªôi dung",
      description: "Vui l√≤ng ƒë·ª£i trong khi h·ªá th·ªëng t·∫°o n·ªôi dung c·ªßa b·∫°n...",
    });

    // ƒê·∫∑t relatedKeywords v√†o request v√† x·ª≠ l√Ω linkItems
    const filteredLinkItems = pendingFormData.linkItems
      ? pendingFormData.linkItems.filter(item => item.keyword && item.url)
      : [];
    
    // ƒê√£ ki·ªÉm tra keywords ·ªü ph√≠a tr√™n r·ªìi
      
    // T√°ch t·ª´ kh√≥a ch√≠nh v√† t·ª´ kh√≥a ph·ª• t·ª´ chu·ªói keywords
    const keywordsArray = pendingFormData.keywords.split(',').filter(Boolean);
    const mainKeyword = keywordsArray.length > 0 ? keywordsArray[0].trim() : '';
    const secondaryKeywords = keywordsArray.length > 1 ? keywordsArray.slice(1).map(k => k.trim()) : [];

    // Convert form data to match the expected JSON format
    const requestData = {
      keywords: pendingFormData.keywords, // Main keywords field
      mainKeyword: mainKeyword, // Primary keyword
      secondaryKeywords: secondaryKeywords.join(','), // Secondary keywords
      length: pendingFormData.length,
      tone: pendingFormData.tone,
      prompt: pendingFormData.prompt || '',
      addHeadings: pendingFormData.addHeadings,
      useBold: pendingFormData.useBold,
      useItalic: pendingFormData.useItalic,
      useBullets: pendingFormData.useBullets,
      relatedKeywords: pendingFormData.relatedKeywords || "",
      language: pendingFormData.language || 'vietnamese',
      country: pendingFormData.country || 'vietnam',
      perspective: pendingFormData.perspective || 'auto',
      complexity: pendingFormData.complexity || 'auto', // Match expected format
      useWebResearch: pendingFormData.useWebResearch || false,
      refSources: pendingFormData.refSources || "",
      aiModel: pendingFormData.aiModel || 'chatgpt',
      linkItems: filteredLinkItems,
      imageSize: pendingFormData.imageSize || 'medium',
      generateImages: pendingFormData.generateImages || false,
      image_size: (() => {
        const size = pendingFormData.imageSize || 'medium';
        switch(size) {
          case 'small':
            return { width: 640, height: 480 };
          case 'medium':
            return { width: 1280, height: 720 };
          case 'large':
            return { width: 1920, height: 1080 };
          default:
            return { width: 1280, height: 720 };
        }
      })(),
      // Add additional fields to match expected format
      userId: user?.id,
      username: user?.username,
      timestamp: new Date().toISOString()
    };

    console.log('Sending content generation request:', requestData);
    generateContentMutation.mutate(requestData);
  };

  // H√†m tr·∫£ v·ªÅ k√≠ch th∆∞·ªõc h√¨nh ·∫£nh theo ƒë·ªãnh d·∫°ng width/height d·ª±a tr√™n lo·∫°i k√≠ch th∆∞·ªõc
  const getImageSizeDimensions = (size: string) => {
    switch(size) {
      case 'small':
        return { width: 640, height: 480 };
      case 'medium':
        return { width: 1080, height: 1920 };
      case 'large':
        return { width: 1920, height: 1080 };
      default:
        return { width: 1080, height: 1920 }; // M·∫∑c ƒë·ªãnh l√† medium
    }
  };

  const handleCopyContent = () => {
    if (generatedContent) {
      copyToClipboard(generatedContent.content)
        .then(() => {
          toast({
            title: "ƒê√£ sao ch√©p v√†o clipboard",
            description: "N·ªôi dung ƒë√£ ƒë∆∞·ª£c sao ch√©p v√†o clipboard",
          });
        })
        .catch(() => {
          toast({
            title: "Kh√¥ng th·ªÉ sao ch√©p",
            description: "Kh√¥ng th·ªÉ sao ch√©p n·ªôi dung v√†o clipboard",
            variant: "destructive",
          });
        });
    }
  };

  const handleDownloadContent = () => {
    if (generatedContent) {
      downloadAsFile(
        generatedContent.content,
        `${generatedContent.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html`,
        "text/html"
      );
      
      toast({
        title: "ƒê√£ t·∫£i xu·ªëng",
        description: "N·ªôi dung ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng",
      });
    }
  };

  const handleSaveArticle = async () => {
    console.log("=== handleSaveArticle CALLED ===");
    console.log("- generatedContent:", generatedContent ? "EXISTS" : "NULL");
    console.log("- isSavingArticle:", isSavingArticle);
    
    if (generatedContent && !isSavingArticle) {
      try {
        setIsSavingArticle(true);
        
        toast({
          title: "ƒêang l∆∞u b√†i vi·∫øt",
          description: "Vui l√≤ng ƒë·ª£i trong khi h·ªá th·ªëng l∆∞u b√†i vi·∫øt c·ªßa b·∫°n...",
        });
        
        // Ki·ªÉm tra xem b√†i vi·∫øt ƒë√£ t·ªìn t·∫°i ch∆∞a
        const articlePayload = {
          title: generatedContent.title || '',
          content: editedContent || generatedContent.content,
          keywords: generatedContent.keywords.join(", "),
          creditsUsed: generatedContent.creditsUsed,
        };
        
        // N·∫øu ƒë√£ c√≥ ID b√†i vi·∫øt, th√¨ g·ª≠i l√™n ƒë·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt c≈©
        if (generatedContent.articleId) {
          (articlePayload as any)['id'] = generatedContent.articleId;
        }
        
        // ƒê·∫£m b·∫£o ti√™u ƒë·ªÅ t·ª´ form ƒë∆∞·ª£c s·ª≠ d·ª•ng khi l∆∞u b√†i vi·∫øt
        const articlePayloadWithTitle = {
          ...articlePayload,
          title: editedTitle // S·ª≠ d·ª•ng ti√™u ƒë·ªÅ ƒë√£ ch·ªânh s·ª≠a t·ª´ dialog
        };
        
        // G·ª≠i request l∆∞u ho·∫∑c c·∫≠p nh·∫≠t b√†i vi·∫øt
        console.log("Debug handleSaveArticle:");
        console.log("- generatedContent.articleId:", generatedContent.articleId);
        console.log("- generatedContent.articleId type:", typeof generatedContent.articleId);
        console.log("- generatedContent.articleId truthy?:", !!generatedContent.articleId);
        console.log("- articlePayloadWithTitle:", articlePayloadWithTitle);
        
        let response;
        if (generatedContent.articleId) {
          // C·∫≠p nh·∫≠t b√†i vi·∫øt ƒë√£ t·ªìn t·∫°i
          console.log("‚Üí S·ª≠ d·ª•ng PATCH ƒë·ªÉ c·∫≠p nh·∫≠t b√†i vi·∫øt ID:", generatedContent.articleId);
          response = await apiRequest("PATCH", `/api/dashboard/articles/${generatedContent.articleId}`, articlePayloadWithTitle);
        } else {
          // T·∫°o b√†i vi·∫øt m·ªõi
          console.log("‚Üí S·ª≠ d·ª•ng POST ƒë·ªÉ t·∫°o b√†i vi·∫øt m·ªõi (articleId is falsy)");
          response = await apiRequest("POST", "/api/dashboard/articles", articlePayloadWithTitle);
        }
        const result = await response.json();
        
        // ƒê√≥ng dialog sau khi l∆∞u th√†nh c√¥ng
        setIsContentDialogOpen(false);
        
        // C·∫≠p nh·∫≠t articleId n·∫øu ƒë√¢y l√† l·∫ßn t·∫°o m·ªõi
        if (!generatedContent.articleId && result.success && result.data?.id) {
          console.log("üîÑ [MANUAL SAVE SUCCESS] Updating generatedContent with new articleId:", result.data.id);
          setGeneratedContent({
            ...generatedContent,
            articleId: result.data.id
          });
        } else if (generatedContent.articleId) {
          console.log("üîÑ [MANUAL SAVE SUCCESS] Keeping existing articleId:", generatedContent.articleId);
          // Gi·ªØ nguy√™n state v·ªõi articleId ƒë·ªÉ c√≥ th·ªÉ update ti·∫øp
        }
        
        // Th√™m button "T·∫°o b√†i vi·∫øt m·ªõi" ƒë·ªÉ user c√≥ th·ªÉ reset khi mu·ªën
        // Kh√¥ng t·ª± ƒë·ªông reset form ƒë·ªÉ user c√≥ th·ªÉ ti·∫øp t·ª•c ch·ªânh s·ª≠a b√†i vi·∫øt hi·ªán t·∫°i
        
        toast({
          title: "ƒê√£ c·∫≠p nh·∫≠t b√†i vi·∫øt",
          description: "B·∫£n nh√°p ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.",
        });
      } catch (error) {
        console.error("L·ªói khi l∆∞u b√†i vi·∫øt:", error);
        
        // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói
        toast({
          title: "L·ªói khi c·∫≠p nh·∫≠t", 
          description: "C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t b·∫£n nh√°p. Vui l√≤ng th·ª≠ l·∫°i.",
          variant: "destructive",
        });
        
        // ƒê√≥ng dialog nh∆∞ng gi·ªØ l·∫°i state ƒë·ªÉ user c√≥ th·ªÉ th·ª≠ l·∫°i
        setIsContentDialogOpen(false);
        console.log("üîÑ [MANUAL SAVE ERROR] Keeping generatedContent state for retry");
        // Kh√¥ng reset state ƒë·ªÉ user c√≥ th·ªÉ th·ª≠ save l·∫°i
      } finally {
        setIsSavingArticle(false);
      }
    }
  };

  // H√†m ki·ªÉm tra s·ªë l∆∞·ª£ng t·ª´ kh√≥a ph·ª• (kh√¥ng bao g·ªìm t·ª´ kh√≥a ch√≠nh)
  const getSecondaryKeywordCount = () => {
    const keywords = form.watch("keywords").split(",").filter(Boolean);
    return keywords.length > 1 ? keywords.slice(1).length : 0;
  };

  // H√†m chuy·ªÉn d√†n √Ω th√†nh prompt text
  const convertOutlineToText = (items: OutlineItem[]): string => {
    if (items.length === 0) return "";
    
    return items.map(item => {
      const prefix = item.level === 'h2' ? '# ' : item.level === 'h3' ? '## ' : '### ';
      return `${prefix}${item.text}`;
    }).join('\n');
  };
  
  // X·ª≠ l√Ω khi th√™m m·ª•c d√†n √Ω m·ªõi
  const handleAddOutlineItem = () => {
    if (currentHeadingText.trim()) {
      const newItem: OutlineItem = {
        id: Date.now().toString(),
        level: currentHeadingLevel,
        text: currentHeadingText.trim()
      };
      
      const updatedItems = [...outlineItems, newItem];
      setOutlineItems(updatedItems);
      
      // C·∫≠p nh·∫≠t prompt
      const outlineText = convertOutlineToText(updatedItems);
      form.setValue('prompt', outlineText);
      
      // Reset input
      setCurrentHeadingText('');
    }
  };
  
  // X·ª≠ l√Ω khi x√≥a m·ª•c
  const handleRemoveOutlineItem = (id: string) => {
    const updatedItems = outlineItems.filter(item => item.id !== id);
    setOutlineItems(updatedItems);
    
    // C·∫≠p nh·∫≠t prompt
    const outlineText = convertOutlineToText(updatedItems);
    form.setValue('prompt', outlineText);
  };
  
  // X·ª≠ l√Ω khi c·∫≠p nh·∫≠t m·ª•c
  const handleUpdateOutlineItem = (id: string, data: Partial<OutlineItem>) => {
    const updatedItems = outlineItems.map(item => 
      item.id === id ? { ...item, ...data } : item
    );
    
    setOutlineItems(updatedItems);
    
    // C·∫≠p nh·∫≠t prompt
    const outlineText = convertOutlineToText(updatedItems);
    form.setValue('prompt', outlineText);
  };
  
  // Kh·ªüi t·∫°o li√™n k·∫øt ƒë·∫ßu ti√™n khi v√†o tab li√™n k·∫øt
  const initializeLinkItems = () => {
    if (!isLinkItemsInitialized) {
      const currentItems = form.watch("linkItems") || [];
      if (currentItems.length === 0) {
        form.setValue("linkItems", [{ keyword: "", url: "" }]);
      }
      setIsLinkItemsInitialized(true);
    }
  };
  
  // X·ª≠ l√Ω khi l∆∞u n·ªôi dung t·ª´ dialog
  const handleSaveEditedContent = () => {
    if (generatedContent) {
      // C·∫≠p nh·∫≠t n·ªôi dung v√† ti√™u ƒë·ªÅ ƒë√£ ch·ªânh s·ª≠a v√†o generatedContent
      console.log("üîÑ [EDIT CONTENT] setGeneratedContent with updated title/content, preserving articleId:", generatedContent.articleId);
      setGeneratedContent({
        ...generatedContent,
        title: editedTitle, // S·ª≠ d·ª•ng ti√™u ƒë·ªÅ ƒë√£ ch·ªânh s·ª≠a
        content: editedContent // ReactQuill tr·∫£ v·ªÅ HTML
      });
      
      // ƒê√≥ng dialog
      setIsContentDialogOpen(false);
      
      toast({
        title: "ƒê√£ c·∫≠p nh·∫≠t n·ªôi dung",
        description: "N·ªôi dung ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng",
      });
    }
  };

  // X·ª≠ l√Ω khi xu·∫•t b·∫£n n·ªôi dung
  const handlePublishContent = () => {
    // L∆∞u n·ªôi dung ƒë√£ ch·ªânh s·ª≠a
    handleSaveEditedContent();
    
    // Hi·ªÉn th·ªã th√¥ng b√°o
    toast({
      title: "ƒêang xu·∫•t b·∫£n n·ªôi dung",
      description: "N·ªôi dung ƒëang ƒë∆∞·ª£c xu·∫•t b·∫£n...",
    });
    
    // TODO: Th·ª±c hi·ªán xu·∫•t b·∫£n n·ªôi dung l√™n website
    // ƒê√¢y l√† ph·∫ßn s·∫Ω tri·ªÉn khai sau khi c√≥ API xu·∫•t b·∫£n
  };

  return (
    <>
      <Head>
        <title>{t("dashboard.createContent")} - {t("common.appName")}</title>
      </Head>
      <DashboardLayout>
        <div className="flex justify-between items-center mb-6">
          <h1 className="text-2xl font-bold text-[#ffffff]">{t("dashboard.create.title")}</h1>
          <div className="bg-secondary-100 px-3 py-1 rounded-full text-sm font-medium flex items-center text-[#ffffff]">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-4 w-4 mr-1 text-accent-500"
              viewBox="0 0 20 20"
              fill="currentColor"
            >
              <path d="M8.433 7.418c.155-.103.346-.196.567-.267v1.698a2.305 2.305 0 01-.567-.267C8.07 8.34 8 8.114 8 8c0-.114.07-.34.433-.582zM11 12.849v-1.698c.22.071.412.164.567.267.364.243.433.468.433.582 0 .114-.07.34-.433.582a2.305 2.305 0 01-.567.267z" />
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-13a1 1 0 10-2 0v.092a4.535 4.535 0 00-1.676.662C6.602 6.234 6 7.009 6 8c0 .99.602 1.765 1.324 2.246.48.32 1.054.545 1.676.662v1.941c-.391-.127-.68-.317-.843-.504a1 1 0 10-1.51 1.31c.562.649 1.413 1.076 2.353 1.253V15a1 1 0 102 0v-.092a4.535 4.535 0 001.676-.662C13.398 13.766 14 12.991 14 12c0-.99-.602-1.765-1.324-2.246A4.535 4.535 0 0011 9.092V7.151c.391.127.68.317.843.504a1 1 0 101.511-1.31c-.563-.649-1.413-1.076-2.354-1.253V5z"
                clipRule="evenodd"
              />
            </svg>
            {user?.credits || 0} {t("common.credits")}
          </div>
        </div>
        
        <div className="mb-2">
          <p className="text-sm text-gray-500 mb-4">{t("dashboard.create.subtitle")}</p>
        </div>
        
        <Card className="create-content-card">
          <CardContent className="p-6">
            <Tabs defaultValue="keywords" className="w-full create-content-tabs">
              <div className="flex flex-col md:flex-row space-y-4 md:space-y-0 md:space-x-6">
                <div className="w-full md:w-64">
                  <TabsList className="grid w-full grid-cols-1 h-auto tabs-list">
                    <TabsTrigger value="keywords" className="flex items-center justify-start tab-trigger">
                      <KeyRound className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.keywords")}</span>
                    </TabsTrigger>
                    <TabsTrigger value="outline" className="flex items-center justify-start tab-trigger">
                      <List className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.outline")}</span>
                    </TabsTrigger>
                    <TabsTrigger value="content" className="flex items-center justify-start tab-trigger">
                      <FileText className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.content")}</span>
                    </TabsTrigger>
                    <TabsTrigger value="knowledge" className="flex items-center justify-start tab-trigger">
                      <BookOpenText className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.knowledge")}</span>
                    </TabsTrigger>
                    <TabsTrigger value="format" className="flex items-center justify-start tab-trigger">
                      <AlignJustify className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.format")}</span>
                    </TabsTrigger>
                    <TabsTrigger value="links" className="flex items-center justify-start tab-trigger">
                      <LinkIcon className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.links")}</span>
                    </TabsTrigger>
                    <TabsTrigger value="media" className="flex items-center justify-start tab-trigger">
                      <Image className="h-5 w-5 mr-2" />
                      <span>{t("dashboard.create.tabs.media")}</span>
                    </TabsTrigger>

                  </TabsList>
                </div>
                
                <div className="flex-1">
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
                      <TabsContent value="keywords" className="mt-0 border rounded-lg p-6 border-slate-200 dark:border-slate-700">
                        <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-100">{t("dashboard.create.keywords.title")}</h3>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.keywords.description")}</p>
                        
                        <div className="space-y-6">
                          <FormField
                            control={form.control}
                            name="length"
                            render={({ field }) => (
                              <FormItem className="content-form-field">
                                <FormLabel className="content-form-label">{t("dashboard.create.form.lengthLabel")}</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue placeholder={t("dashboard.create.form.lengthPlaceholder")} />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="short">{t("dashboard.create.form.lengthOptions.short")}</SelectItem>
                                    <SelectItem value="medium">{t("dashboard.create.form.lengthOptions.medium")}</SelectItem>
                                    <SelectItem value="long">{t("dashboard.create.form.lengthOptions.long")}</SelectItem>
                                    <SelectItem value="extra_long">{t("dashboard.create.form.lengthOptions.extraLong")}</SelectItem>
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          
                          {/* T·ª´ kh√≥a ch√≠nh */}
                          <div className="content-form-field">
                            <Label htmlFor="mainKeyword" className="content-form-label block">
                              {t("dashboard.create.keywords.mainKeyword")} <span className="text-red-500">*</span>
                            </Label>
                            
                            {/* Tr∆∞·ªùng input th√¥ng th∆∞·ªùng cho t·ª´ kh√≥a ch√≠nh */}
                            <Input 
                              id="mainKeyword"
                              placeholder={t("dashboard.create.keywords.mainKeywordPlaceholder")}
                              className="mt-1 border-slate-300 dark:border-slate-700 focus:border-primary dark:focus:border-primary"
                              value={form.watch("keywords").split(",")[0] || ""}
                              onChange={(e) => {
                                // Kh√¥ng trim gi√° tr·ªã ƒë·ªÉ cho ph√©p nh·∫≠p d·∫•u c√°ch
                                const mainKeyword = e.target.value;
                                const currentKeywords = form.watch("keywords").split(",").filter(Boolean);
                                const secondaryKeywords = currentKeywords.length > 1 ? currentKeywords.slice(1) : [];
                                const newKeywords = mainKeyword 
                                  ? [mainKeyword, ...secondaryKeywords]
                                  : secondaryKeywords;
                                form.setValue("keywords", newKeywords.join(","));
                              }}
                            />
                          </div>
                          
                          {/* T·ª´ kh√≥a ph·ª• */}
                          <div className="content-form-field">
                            <Label htmlFor="secondaryKeyword" className="content-form-label block">
                              {t("dashboard.create.keywords.secondaryKeyword")}
                              <span className="ml-1 text-sm text-gray-500 dark:text-gray-400">
                                ({getSecondaryKeywordCount()}/3)
                              </span>
                            </Label>
                            
                            <div className="flex flex-wrap gap-2 mb-2">
                              {form.watch("keywords").split(",").filter(Boolean).map((keyword, index) => {
                                if (index === 0) return null; // Skip main keyword
                                return (
                                  <Badge
                                    key={index}
                                    className="inline-flex items-center rounded-full bg-cyan-50 px-2.5 py-1 text-sm font-medium text-cyan-700 dark:bg-cyan-900 dark:text-cyan-100"
                                  >
                                    <span className="mr-1">{keyword.trim()}</span>
                                    <button
                                      type="button"
                                      className="flex-shrink-0 ml-1 h-4 w-4 rounded-full inline-flex items-center justify-center text-cyan-600 dark:text-cyan-100 hover:bg-cyan-200 hover:text-cyan-800 dark:hover:bg-cyan-800 dark:hover:text-white focus:outline-none"
                                      onClick={() => {
                                        const currentKeywords = form.watch("keywords").split(",").filter(Boolean);
                                        currentKeywords.splice(index, 1);
                                        form.setValue("keywords", currentKeywords.join(","));
                                      }}
                                    >
                                      <span className="sr-only">Remove keyword</span>
                                      <X className="h-3 w-3" />
                                    </button>
                                  </Badge>
                                );
                              })}
                            </div>
                            
                            <div className="flex mt-1">
                              <Input 
                                id="secondaryKeyword"
                                placeholder={t("dashboard.create.keywords.secondaryKeywordPlaceholder")}
                                className="flex-1 border-slate-300 dark:border-slate-700 focus:border-primary dark:focus:border-primary"
                                disabled={getSecondaryKeywordCount() >= 3}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    const input = e.target as HTMLInputElement;
                                    const keyword = input.value.trim();
                                    if (keyword && getSecondaryKeywordCount() < 3) {
                                      const currentKeywords = form.watch("keywords").split(",").filter(Boolean);
                                      // ƒê·∫£m b·∫£o t·ª´ kh√≥a ch√≠nh v·∫´n ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n
                                      const mainKeyword = currentKeywords.length > 0 ? currentKeywords[0] : "";
                                      // L·∫•y c√°c t·ª´ kh√≥a ph·ª• hi·ªán t·∫°i
                                      const secondaryKeywords = currentKeywords.length > 1 ? currentKeywords.slice(1) : [];
                                      // Th√™m t·ª´ kh√≥a m·ªõi v√†o m·∫£ng t·ª´ kh√≥a ph·ª• n·∫øu ch∆∞a ƒë·ªß 3 t·ª´
                                      if (secondaryKeywords.length < 3) {
                                        secondaryKeywords.push(keyword);
                                        // G·ªôp l·∫°i v·ªõi t·ª´ kh√≥a ch√≠nh
                                        const newKeywords = [mainKeyword, ...secondaryKeywords].filter(Boolean);
                                        form.setValue("keywords", newKeywords.join(","));
                                        input.value = "";
                                      }
                                    }
                                  }
                                }}
                              />
                              <Button 
                                type="button" 
                                variant="outline" 
                                size="sm" 
                                className="ml-2 bg-primary text-white hover:bg-primary/90 dark:bg-primary dark:text-white dark:hover:bg-primary/90"
                                disabled={getSecondaryKeywordCount() >= 3}
                                onClick={() => {
                                  const input = document.getElementById("secondaryKeyword") as HTMLInputElement;
                                  const keyword = input.value.trim();
                                  if (keyword && getSecondaryKeywordCount() < 3) {
                                    const currentKeywords = form.watch("keywords").split(",").filter(Boolean);
                                    // ƒê·∫£m b·∫£o t·ª´ kh√≥a ch√≠nh v·∫´n ·ªü v·ªã tr√≠ ƒë·∫ßu ti√™n
                                    const mainKeyword = currentKeywords.length > 0 ? currentKeywords[0] : "";
                                    // L·∫•y c√°c t·ª´ kh√≥a ph·ª• hi·ªán t·∫°i
                                    const secondaryKeywords = currentKeywords.length > 1 ? currentKeywords.slice(1) : [];
                                    // Th√™m t·ª´ kh√≥a m·ªõi v√†o m·∫£ng t·ª´ kh√≥a ph·ª• n·∫øu ch∆∞a ƒë·ªß 3 t·ª´
                                    if (secondaryKeywords.length < 3) {
                                      secondaryKeywords.push(keyword);
                                      // G·ªôp l·∫°i v·ªõi t·ª´ kh√≥a ch√≠nh
                                      const newKeywords = [mainKeyword, ...secondaryKeywords].filter(Boolean);
                                      form.setValue("keywords", newKeywords.join(","));
                                      input.value = "";
                                    }
                                  }
                                }}
                              >
                                {t("dashboard.create.keywords.addNew")}
                              </Button>
                            </div>
                          </div>
                          
                          {/* T·ª´ kh√≥a li√™n quan */}
                          <div>
                            <Label htmlFor="relatedKeyword" className="text-gray-700 dark:text-gray-200 mb-1 block">
                              {t("dashboard.create.keywords.relatedKeyword")}
                              <span className="ml-1 text-sm text-gray-500 dark:text-gray-400">
                                ({(form.watch("relatedKeywords") || "").split(",").filter(Boolean).length}/3)
                              </span>
                            </Label>
                            
                            <div className="flex flex-wrap gap-2 mb-2">
                              {(form.watch("relatedKeywords") || "").split(",").filter(Boolean).map((keyword, index) => (
                                <Badge
                                  key={index}
                                  className="inline-flex items-center rounded-full bg-emerald-50 px-2.5 py-1 text-sm font-medium text-emerald-700 dark:bg-emerald-900 dark:text-emerald-100"
                                >
                                  <span className="mr-1">{keyword.trim()}</span>
                                  <button
                                    type="button"
                                    className="flex-shrink-0 ml-1 h-4 w-4 rounded-full inline-flex items-center justify-center text-emerald-600 dark:text-emerald-100 hover:bg-emerald-200 hover:text-emerald-800 dark:hover:bg-emerald-800 dark:hover:text-white focus:outline-none"
                                    onClick={() => {
                                      const currentRelatedKeywords = (form.watch("relatedKeywords") || "").split(",").filter(Boolean);
                                      currentRelatedKeywords.splice(index, 1);
                                      form.setValue("relatedKeywords", currentRelatedKeywords.join(","));
                                    }}
                                  >
                                    <span className="sr-only">Remove keyword</span>
                                    <X className="h-3 w-3" />
                                  </button>
                                </Badge>
                              ))}
                            </div>
                            
                            <div className="flex mt-1">
                              <Input 
                                id="relatedKeyword"
                                placeholder={t("dashboard.create.keywords.relatedKeywordPlaceholder")}
                                className="flex-1 border-slate-300 dark:border-slate-700 focus:border-primary dark:focus:border-primary"
                                disabled={(form.watch("relatedKeywords") || "").split(",").filter(Boolean).length >= 3}
                                onKeyDown={(e) => {
                                  if (e.key === 'Enter') {
                                    e.preventDefault();
                                    const input = e.target as HTMLInputElement;
                                    const keyword = input.value.trim();
                                    if (keyword) {
                                      const currentRelatedKeywords = (form.watch("relatedKeywords") || "").split(",").filter(Boolean);
                                      if (currentRelatedKeywords.length < 3) {
                                        currentRelatedKeywords.push(keyword);
                                        form.setValue("relatedKeywords", currentRelatedKeywords.join(","));
                                        input.value = "";
                                      }
                                    }
                                  }
                                }}
                              />
                              <Button 
                                type="button" 
                                variant="outline" 
                                size="sm" 
                                className="ml-2 bg-primary text-white hover:bg-primary/90 dark:bg-primary dark:text-white dark:hover:bg-primary/90"
                                disabled={(form.watch("relatedKeywords") || "").split(",").filter(Boolean).length >= 3}
                                onClick={() => {
                                  const input = document.getElementById("relatedKeyword") as HTMLInputElement;
                                  const keyword = input.value.trim();
                                  if (keyword) {
                                    const currentRelatedKeywords = (form.watch("relatedKeywords") || "").split(",").filter(Boolean);
                                    if (currentRelatedKeywords.length < 3) {
                                      currentRelatedKeywords.push(keyword);
                                      form.setValue("relatedKeywords", currentRelatedKeywords.join(","));
                                      input.value = "";
                                    }
                                  }
                                }}
                              >
                                {t("dashboard.create.keywords.addNew")}
                              </Button>
                            </div>
                          </div>
                          
                          {/* Content Type section - Hidden as requested by user */}
                          {/* <div className="pt-4 border-t mt-4">
                            <FormField
                              control={form.control}
                              name="contentType"
                              render={({ field }) => (
                                <FormItem>
                                  <FormLabel>{t("dashboard.create.form.contentType")}</FormLabel>
                                  <Select
                                    onValueChange={field.onChange}
                                    defaultValue={field.value}
                                  >
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder="Select content type" />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="blog">{t("dashboard.create.form.contentTypeOptions.blog")}</SelectItem>
                                      <SelectItem value="product">{t("dashboard.create.form.contentTypeOptions.product")}</SelectItem>
                                      <SelectItem value="news">{t("dashboard.create.form.contentTypeOptions.news")}</SelectItem>
                                      <SelectItem value="social">{t("dashboard.create.form.contentTypeOptions.social")}</SelectItem>
                                    </SelectContent>
                                  </Select>
                                  <FormMessage />
                                </FormItem>
                              )}
                            />
                          </div> */}
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="outline" className="mt-0 border border-slate-200 dark:border-slate-700 rounded-lg p-6">
                        <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-100">{t("dashboard.create.outline.title")}</h3>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.outline.description")}</p>
                        
                        <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 mb-6">
                          <div className="flex items-center mb-2">
                            <div className="flex-shrink-0 w-6 h-6 rounded-full bg-violet-200 text-violet-600 flex items-center justify-center mr-2">
                              <span className="text-sm">1</span>
                            </div>
                            <div className="font-medium">{t("dashboard.create.outline.customizeStructure")}</div>
                          </div>
                          <p className="text-sm text-gray-600 dark:text-gray-300 pl-8">
                            {t("dashboard.create.outline.autoGenerateMessage")}
                          </p>
                        </div>
                        
                        <div className="space-y-4">
                          {outlineItems.length === 0 ? (
                            <div className="text-center py-6 text-sm text-gray-500 dark:text-gray-400">
                              {t("dashboard.create.outline.empty")}
                            </div>
                          ) : (
                            <div className="space-y-2">
                              {outlineItems.map((item) => (
                                <div key={item.id} className="flex items-start space-x-2">
                                  <div className="flex-shrink-0">
                                    <Select
                                      value={item.level}
                                      onValueChange={(value: string) => 
                                        handleUpdateOutlineItem(item.id, { level: value as 'h2' | 'h3' | 'h4' })
                                      }
                                    >
                                      <SelectTrigger className="w-20 h-10">
                                        <SelectValue placeholder="H2" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="h2">H2</SelectItem>
                                        <SelectItem value="h3">H3</SelectItem>
                                        <SelectItem value="h4">H4</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>
                                  <div className="flex-grow">
                                    <Input 
                                      value={item.text}
                                      onChange={(e) => handleUpdateOutlineItem(item.id, { text: e.target.value })}
                                      placeholder={t("dashboard.create.outline.headingPlaceholder")} 
                                      className="h-10 border-slate-300 dark:border-slate-700 focus:border-primary dark:focus:border-primary"
                                    />
                                  </div>
                                  <Button 
                                    variant="ghost" 
                                    size="icon" 
                                    className="text-red-500"
                                    onClick={() => handleRemoveOutlineItem(item.id)}
                                  >
                                    <span className="sr-only">Delete</span>
                                    <Trash2 className="h-5 w-5" />
                                  </Button>
                                </div>
                              ))}
                            </div>
                          )}
                          
                          <div className="flex flex-col space-y-2">
                            <div className="flex items-start space-x-2">
                              <div className="flex-shrink-0">
                                <Select
                                  value={currentHeadingLevel}
                                  onValueChange={(value) => 
                                    setCurrentHeadingLevel(value as 'h2' | 'h3' | 'h4')
                                  }
                                >
                                  <SelectTrigger className="w-20 h-10">
                                    <SelectValue placeholder="H2" />
                                  </SelectTrigger>
                                  <SelectContent>
                                    <SelectItem value="h2">H2</SelectItem>
                                    <SelectItem value="h3">H3</SelectItem>
                                    <SelectItem value="h4">H4</SelectItem>
                                  </SelectContent>
                                </Select>
                              </div>
                              <div className="flex-grow">
                                <Input 
                                  value={currentHeadingText}
                                  onChange={(e) => setCurrentHeadingText(e.target.value)}
                                  placeholder={t("dashboard.create.outline.headingPlaceholder")} 
                                  className="h-10 border-slate-300 dark:border-slate-700 focus:border-primary dark:focus:border-primary"
                                />
                              </div>
                            </div>
                            
                            <Button 
                              type="button"
                              variant="outline" 
                              className="flex items-center text-violet-600 border-violet-200 bg-violet-50 hover:bg-violet-100 dark:border-violet-800 dark:bg-violet-900/50 dark:hover:bg-violet-900 dark:text-violet-300 w-full justify-center"
                              onClick={handleAddOutlineItem}
                            >
                              <Plus className="h-4 w-4 mr-2" />
                              {t("dashboard.create.outline.addStructure")}
                            </Button>
                          </div>
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="content" className="mt-0 border border-slate-200 dark:border-slate-700 rounded-lg p-6">
                        <div className="flex items-start">
                          <FileText className="h-6 w-6 text-blue-500 mr-2 flex-shrink-0 mt-1" />
                          <div>
                            <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-100">{t("dashboard.create.content.title")}</h3>
                            <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.content.description")}</p>
                          </div>
                        </div>
                        
                        <div className="space-y-6">

                          {/* Ng√¥n ng·ªØ */}
                          <div className="space-y-2">
                            <Label htmlFor="language" className="block text-sm font-medium">
                              {t("dashboard.create.content.language")}
                            </Label>
                            <FormField
                              control={form.control}
                              name="language"
                              render={({ field }) => (
                                <FormItem>
                                  <Select
                                    value={field.value}
                                    onValueChange={field.onChange}
                                  >
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder={t("dashboard.create.content.selectLanguage")} />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="vietnamese">{t("dashboard.create.content.languages.vietnamese")}</SelectItem>
                                      <SelectItem value="english">{t("dashboard.create.content.languages.english")}</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </FormItem>
                              )}
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              {t("dashboard.create.content.languageHint")}
                            </p>
                          </div>
                          
                          {/* Qu·ªëc gia */}
                          <div className="space-y-2">
                            <Label htmlFor="country" className="block text-sm font-medium">
                              {t("dashboard.create.content.country")}
                            </Label>
                            <FormField
                              control={form.control}
                              name="country"
                              render={({ field }) => (
                                <FormItem>
                                  <Select
                                    value={field.value}
                                    onValueChange={field.onChange}
                                  >
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder={t("dashboard.create.content.selectCountry")} />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="vietnam">{t("dashboard.create.content.countries.vietnam")}</SelectItem>
                                      <SelectItem value="us">{t("dashboard.create.content.countries.us")}</SelectItem>
                                      <SelectItem value="global">{t("dashboard.create.content.countries.global")}</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </FormItem>
                              )}
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              {t("dashboard.create.content.countryHint")}
                            </p>
                          </div>
                          
                          {/* Gi·ªçng n√≥i */}
                          <div className="space-y-2">
                            <Label htmlFor="tone" className="block text-sm font-medium">
                              {t("dashboard.create.content.voice")}
                            </Label>
                            <FormField
                              control={form.control}
                              name="tone"
                              render={({ field }) => (
                                <FormItem>
                                  <Select
                                    value={field.value}
                                    onValueChange={field.onChange}
                                  >
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder={t("dashboard.create.content.selectVoice")} />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="professional">{t("dashboard.create.form.toneOptions.professional")}</SelectItem>
                                      <SelectItem value="conversational">{t("dashboard.create.form.toneOptions.conversational")}</SelectItem>
                                      <SelectItem value="informative">{t("dashboard.create.form.toneOptions.informative")}</SelectItem>
                                      <SelectItem value="persuasive">{t("dashboard.create.form.toneOptions.persuasive")}</SelectItem>
                                      <SelectItem value="humorous">{t("dashboard.create.form.toneOptions.humorous")}</SelectItem>
                                      <SelectItem value="neutral">{t("dashboard.create.content.voices.neutral")}</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </FormItem>
                              )}
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              {t("dashboard.create.content.voiceHint")}
                            </p>
                          </div>
                          
                          {/* Ng√¥i k·ªÉ */}
                          <div className="space-y-2">
                            <Label htmlFor="perspective" className="block text-sm font-medium">
                              {t("dashboard.create.content.perspective")}
                            </Label>
                            <FormField
                              control={form.control}
                              name="perspective"
                              render={({ field }) => (
                                <FormItem>
                                  <Select
                                    value={field.value}
                                    onValueChange={field.onChange}
                                  >
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder={t("dashboard.create.content.selectPerspective")} />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="auto">{t("dashboard.create.content.perspectives.auto")}</SelectItem>
                                      <SelectItem value="first">{t("dashboard.create.content.perspectives.first")}</SelectItem>
                                      <SelectItem value="second">{t("dashboard.create.content.perspectives.second")}</SelectItem>
                                      <SelectItem value="third">{t("dashboard.create.content.perspectives.third")}</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </FormItem>
                              )}
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              {t("dashboard.create.content.perspectiveHint")}
                            </p>
                          </div>
                          
                          {/* M·ª©c ƒë·ªô */}
                          <div className="space-y-2">
                            <Label htmlFor="complexity" className="block text-sm font-medium">
                              {t("dashboard.create.content.complexity")}
                            </Label>
                            <FormField
                              control={form.control}
                              name="complexity"
                              render={({ field }) => (
                                <FormItem>
                                  <Select
                                    value={field.value}
                                    onValueChange={field.onChange}
                                  >
                                    <FormControl>
                                      <SelectTrigger>
                                        <SelectValue placeholder={t("dashboard.create.content.selectComplexity")} />
                                      </SelectTrigger>
                                    </FormControl>
                                    <SelectContent>
                                      <SelectItem value="auto">{t("dashboard.create.content.complexities.auto")}</SelectItem>
                                      <SelectItem value="basic">{t("dashboard.create.content.complexities.basic")}</SelectItem>
                                      <SelectItem value="intermediate">{t("dashboard.create.content.complexities.intermediate")}</SelectItem>
                                      <SelectItem value="advanced">{t("dashboard.create.content.complexities.advanced")}</SelectItem>
                                    </SelectContent>
                                  </Select>
                                </FormItem>
                              )}
                            />
                            <p className="text-xs text-gray-500 mt-1">
                              {t("dashboard.create.content.complexityHint")}
                            </p>
                          </div>
                          

                        </div>
                      </TabsContent>
                      
                      <TabsContent value="style" className="mt-0 border rounded-lg p-4">
                        <div className="flex items-start">
                          <Paintbrush className="h-6 w-6 text-blue-500 mr-2 flex-shrink-0 mt-1" />
                          <div>
                            <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-100">Phong c√°ch</h3>
                            <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">T√πy ch·ªânh phong c√°ch c·ªßa n·ªôi dung</p>
                          </div>
                        </div>
                        
                        <div className="space-y-4">
                          <FormField
                            control={form.control}
                            name="tone"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel>Gi·ªçng ƒëi·ªáu n·ªôi dung</FormLabel>
                                <Select
                                  onValueChange={field.onChange}
                                  defaultValue={field.value}
                                >
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue placeholder="Select tone" />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="professional">{t("dashboard.create.form.toneOptions.professional")}</SelectItem>
                                    <SelectItem value="conversational">{t("dashboard.create.form.toneOptions.conversational")}</SelectItem>
                                    <SelectItem value="informative">{t("dashboard.create.form.toneOptions.informative")}</SelectItem>
                                    <SelectItem value="persuasive">{t("dashboard.create.form.toneOptions.persuasive")}</SelectItem>
                                    <SelectItem value="humorous">{t("dashboard.create.form.toneOptions.humorous")}</SelectItem>
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="format" className="mt-0 border border-slate-200 dark:border-slate-700 rounded-lg p-6">
                        <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-100">{t("dashboard.create.format.title")}</h3>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.format.description")}</p>
                        
                        <div className="space-y-6">
                          
                          <FormField
                            control={form.control}
                            name="useBold"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                                <div className="flex items-center space-x-2">
                                  <Bold className="h-5 w-5 text-gray-700 dark:text-gray-300" />
                                  <div className="space-y-0.5">
                                    <FormLabel className="text-base">{t("dashboard.create.format.bold")}</FormLabel>
                                    <p className="text-sm text-muted-foreground">
                                      {t("dashboard.create.format.boldDescription")}
                                    </p>
                                  </div>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="useItalic"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                                <div className="flex items-center space-x-2">
                                  <Italic className="h-5 w-5 text-gray-700 dark:text-gray-300" />
                                  <div className="space-y-0.5">
                                    <FormLabel className="text-base">{t("dashboard.create.format.italic")}</FormLabel>
                                    <p className="text-sm text-muted-foreground">
                                      {t("dashboard.create.format.italicDescription")}
                                    </p>
                                  </div>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />

                          <FormField
                            control={form.control}
                            name="useBullets"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-center justify-between rounded-lg border p-4">
                                <div className="flex items-center space-x-2">
                                  <ListOrdered className="h-5 w-5 text-gray-700 dark:text-gray-300" />
                                  <div className="space-y-0.5">
                                    <FormLabel className="text-base">{t("dashboard.create.format.bulletPoints")}</FormLabel>
                                    <p className="text-sm text-muted-foreground">
                                      {t("dashboard.create.format.bulletPointsDescription")}
                                    </p>
                                  </div>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="addHeadings"
                            render={({ field }) => (
                              <FormItem className="content-tabitem">
                                <div className="flex items-center space-x-2">
                                  <Heading2 className="h-5 w-5 text-primary" />
                                  <div className="space-y-0.5">
                                    <FormLabel className="text-base">{t("dashboard.create.format.addSectionHeadings")}</FormLabel>
                                    <p className="text-sm text-muted-foreground">
                                      {t("dashboard.create.format.addSectionHeadingsDescription")}
                                    </p>
                                  </div>
                                </div>
                                <FormControl>
                                  <Switch
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                  />
                                </FormControl>
                              </FormItem>
                            )}
                          />
                        </div>
                      </TabsContent>
                      
                      <TabsContent 
                        value="links" 
                        className="mt-0 border rounded-lg p-4"
                        onSelect={initializeLinkItems}
                      >
                        <div className="flex items-center mb-2 text-gray-800 dark:text-gray-100">
                          <LinkIcon className="h-5 w-5 mr-2" />
                          <h3 className="text-lg font-medium">{t("dashboard.create.links.title")}</h3>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.links.description")}</p>
                        
                        <div className="space-y-6">
                          <div>
                            <h4 className="font-medium mb-2">
                              {t("dashboard.create.links.linkList")}
                              <span className="ml-2 text-sm text-gray-500 dark:text-gray-400">
                                ({form.watch("linkItems")?.length || 0}/5)
                              </span>
                            </h4>
                            
                            <div className="space-y-4">
                              {(form.watch("linkItems") || []).map((item, index) => (
                                <div key={index} className="grid grid-cols-2 gap-4 p-3 border rounded-md relative">
                                  <div>
                                    <Label htmlFor={`keyword-${index}`} className="mb-1 block">{t("dashboard.create.links.keyword")}</Label>
                                    <Input 
                                      id={`keyword-${index}`} 
                                      placeholder={t("dashboard.create.links.keyword")}
                                      value={item.keyword || ''}
                                      onChange={(e) => {
                                        const items = [...form.watch("linkItems")];
                                        if (items[index]) {
                                          items[index].keyword = e.target.value;
                                          form.setValue("linkItems", items);
                                        }
                                      }}
                                    />
                                  </div>
                                  <div>
                                    <Label htmlFor={`link-${index}`} className="mb-1 block">{t("dashboard.create.links.link")}</Label>
                                    <Input 
                                      id={`link-${index}`} 
                                      placeholder={t("dashboard.create.links.link")}
                                      value={item.url || ''}
                                      onChange={(e) => {
                                        const items = [...form.watch("linkItems")];
                                        if (items[index]) {
                                          items[index].url = e.target.value;
                                          form.setValue("linkItems", items);
                                        }
                                      }}
                                    />
                                  </div>
                                  <Button
                                    type="button"
                                    variant="ghost"
                                    size="icon"
                                    className="absolute top-2 right-2 h-6 w-6 text-gray-400 hover:text-red-500"
                                    onClick={() => {
                                      const items = (form.watch("linkItems") || []).filter((_, i) => i !== index);
                                      form.setValue("linkItems", items);
                                    }}
                                  >
                                    <X className="h-4 w-4" />
                                  </Button>
                                </div>
                              ))}
                              
                              <div className="flex justify-end">
                                <Button 
                                  type="button" 
                                  className="bg-purple-500 hover:bg-purple-600 text-white"
                                  disabled={(form.watch("linkItems") || []).length >= 5}
                                  onClick={() => {
                                    const currentItems = form.watch("linkItems") || [];
                                    if (currentItems.length < 5) {
                                      form.setValue("linkItems", [
                                        ...currentItems,
                                        { keyword: "", url: "" }
                                      ]);
                                    }
                                  }}
                                >
                                  <Plus className="h-4 w-4 mr-1" />
                                  {t("dashboard.create.links.addLink")}
                                </Button>
                              </div>
                            </div>
                          </div>
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="media" className="mt-0 border rounded-lg p-4">
                        <div className="flex items-center mb-2 text-gray-800 dark:text-gray-100">
                          <Image className="h-5 w-5 mr-2" />
                          <h3 className="text-lg font-medium">{t("dashboard.create.media.title")}</h3>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.media.description")}</p>
                        
                        <div className="space-y-6">
                          <div>
                            <h4 className="text-md font-medium mb-4">{t("dashboard.create.media.imageSize")}</h4>
                            
                            <div className="grid grid-cols-1 gap-4">
                              <FormField
                                control={form.control}
                                name="imageSize"
                                render={({ field }) => (
                                  <FormItem>
                                    <div className="space-y-4">
                                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <div>
                                          <label 
                                            className={`relative flex cursor-pointer rounded-lg border bg-white dark:bg-gray-800 p-4 shadow-sm focus:outline-none ${field.value === 'small' ? 'border-2 border-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
                                          >
                                            <input
                                              type="radio"
                                              name="imageSize"
                                              value="small"
                                              className="sr-only"
                                              checked={field.value === 'small'}
                                              onChange={() => field.onChange('small')}
                                            />
                                            <span className="flex flex-1 items-center">
                                              <span className="flex flex-col text-sm">
                                                <span className="font-medium text-gray-900 dark:text-gray-100">{t("dashboard.create.media.imageSizes.small")}</span>
                                              </span>
                                            </span>
                                            {field.value === 'small' && (
                                              <span className="absolute -right-1 -top-1 flex h-6 w-6 items-center justify-center rounded-full bg-blue-500 text-white">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                                                  <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                                </svg>
                                              </span>
                                            )}
                                          </label>
                                        </div>
                                        
                                        <div>
                                          <label 
                                            className={`relative flex cursor-pointer rounded-lg border bg-white dark:bg-gray-800 p-4 shadow-sm focus:outline-none ${field.value === 'medium' ? 'border-2 border-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
                                          >
                                            <input
                                              type="radio"
                                              name="imageSize"
                                              value="medium"
                                              className="sr-only"
                                              checked={field.value === 'medium'}
                                              onChange={() => field.onChange('medium')}
                                            />
                                            <span className="flex flex-1 items-center">
                                              <span className="flex flex-col text-sm">
                                                <span className="font-medium text-gray-900 dark:text-gray-100">{t("dashboard.create.media.imageSizes.medium")}</span>
                                              </span>
                                            </span>
                                            {field.value === 'medium' && (
                                              <span className="absolute -right-1 -top-1 flex h-6 w-6 items-center justify-center rounded-full bg-blue-500 text-white">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                                                  <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                                </svg>
                                              </span>
                                            )}
                                          </label>
                                        </div>
                                        
                                        <div>
                                          <label 
                                            className={`relative flex cursor-pointer rounded-lg border bg-white dark:bg-gray-800 p-4 shadow-sm focus:outline-none ${field.value === 'large' ? 'border-2 border-blue-500' : 'border-gray-200 dark:border-gray-700'}`}
                                          >
                                            <input
                                              type="radio"
                                              name="imageSize"
                                              value="large"
                                              className="sr-only"
                                              checked={field.value === 'large'}
                                              onChange={() => field.onChange('large')}
                                            />
                                            <span className="flex flex-1 items-center">
                                              <span className="flex flex-col text-sm">
                                                <span className="font-medium text-gray-900 dark:text-gray-100">{t("dashboard.create.media.imageSizes.large")}</span>
                                              </span>
                                            </span>
                                            {field.value === 'large' && (
                                              <span className="absolute -right-1 -top-1 flex h-6 w-6 items-center justify-center rounded-full bg-blue-500 text-white">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-4 h-4">
                                                  <path strokeLinecap="round" strokeLinejoin="round" d="M4.5 12.75l6 6 9-13.5" />
                                                </svg>
                                              </span>
                                            )}
                                          </label>
                                        </div>
                                      </div>
                                    </div>
                                  </FormItem>
                                )}
                              />
                            </div>
                          </div>

                          {/* Image Generation Section */}
                          <div className="border-t pt-6">
                            <h4 className="text-md font-medium mb-4">{t("dashboard.create.media.autoGenerate")}</h4>
                            
                            <FormField
                              control={form.control}
                              name="generateImages"
                              render={({ field }) => (
                                <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 bg-slate-50 dark:bg-slate-800">
                                  <FormControl>
                                    <Checkbox
                                      checked={field.value}
                                      onCheckedChange={field.onChange}
                                    />
                                  </FormControl>
                                  <div className="space-y-1 leading-none">
                                    <FormLabel className="font-medium">{t("dashboard.create.media.autoGenerate")}</FormLabel>
                                    <p className="text-sm text-muted-foreground">
                                      {t("dashboard.create.media.autoGenerateDescription")}
                                    </p>
                                  </div>
                                </FormItem>
                              )}
                            />


                          </div>
                        </div>
                      </TabsContent>
                      
                      <TabsContent value="knowledge" className="mt-0 border border-slate-200 dark:border-slate-700 rounded-lg p-6">
                        <h3 className="text-lg font-medium mb-2 text-gray-800 dark:text-gray-100">{t("dashboard.create.knowledge.title")}</h3>
                        <p className="text-sm text-gray-600 dark:text-gray-300 mb-6">{t("dashboard.create.knowledge.description")}</p>
                        
                        <div className="space-y-4">
                          <FormField
                            control={form.control}
                            name="useWebResearch"
                            render={({ field }) => (
                              <FormItem className="flex flex-row items-start space-x-3 space-y-0 rounded-md border p-4 bg-slate-50 dark:bg-slate-800">
                                <FormControl>
                                  <Checkbox
                                    checked={field.value}
                                    onCheckedChange={field.onChange}
                                    defaultChecked={true}
                                  />
                                </FormControl>
                                <div className="space-y-1 leading-none">
                                  <FormLabel className="font-medium">{t("dashboard.create.knowledge.webResearch")}</FormLabel>
                                  <p className="text-sm text-muted-foreground">
                                    {t("dashboard.create.knowledge.webResearchDescription")}
                                  </p>
                                </div>
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="refSources"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="font-medium">{t("dashboard.create.knowledge.refSources")}</FormLabel>
                                <p className="text-sm text-muted-foreground">
                                  {t("dashboard.create.knowledge.refSourcesDescription")}
                                </p>
                                <FormControl>
                                  <Input
                                    placeholder={t("dashboard.create.knowledge.refSourcesPlaceholder")}
                                    type="url"
                                    {...field}
                                  />
                                </FormControl>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                          
                          <FormField
                            control={form.control}
                            name="aiModel"
                            render={({ field }) => (
                              <FormItem>
                                <FormLabel className="font-medium">{t("dashboard.create.knowledge.aiModel")}</FormLabel>
                                <p className="text-sm text-muted-foreground">
                                  {t("dashboard.create.knowledge.aiModelDescription")}
                                </p>
                                <Select 
                                  onValueChange={field.onChange} 
                                  defaultValue={field.value}
                                  value={field.value}
                                >
                                  <FormControl>
                                    <SelectTrigger>
                                      <SelectValue placeholder={t("dashboard.create.knowledge.aiModelPlaceholder")} />
                                    </SelectTrigger>
                                  </FormControl>
                                  <SelectContent>
                                    <SelectItem value="chatgpt">ChatGPT</SelectItem>
                                    <SelectItem value="gemini">Gemini</SelectItem>
                                  </SelectContent>
                                </Select>
                                <FormMessage />
                              </FormItem>
                            )}
                          />
                        </div>
                      </TabsContent>
                      

                      
                      <div className="border-t border-slate-200 dark:border-slate-700 pt-6 flex justify-between items-center mt-4">
                        {/* Button "T·∫°o b√†i vi·∫øt m·ªõi" hi·ªÉn th·ªã khi ƒë√£ c√≥ content */}
                        {generatedContent && (
                          <Button
                            type="button"
                            variant="outline"
                            className="text-gray-600 border-gray-300 hover:bg-gray-50 dark:text-gray-400 dark:border-gray-600 dark:hover:bg-gray-800"
                            onClick={() => {
                              setGeneratedContent(null);
                              setEditedTitle("");
                              setEditedContent("");
                              form.reset({
                                contentType: 'blog',
                                keywords: '',
                                mainKeyword: '',
                                length: 'medium',
                                tone: 'conversational',
                                language: 'vietnamese',
                                country: 'vietnam',
                                perspective: 'auto',
                                complexity: 'auto',
                                useBold: true,
                                useItalic: true,
                                useBullets: true,
                                addHeadings: true,
                                useWebResearch: true,
                                aiModel: 'chatgpt'
                              });
                              toast({
                                title: "ƒê√£ reset form",
                                description: "B·∫°n c√≥ th·ªÉ t·∫°o b√†i vi·∫øt m·ªõi.",
                              });
                            }}
                          >
                            <Plus className="h-4 w-4 mr-2" />
                            T·∫°o b√†i vi·∫øt m·ªõi
                          </Button>
                        )}
                        
                        <div className="flex space-x-3">
                          <Button
                            type="button"
                            className="bg-primary hover:bg-primary/90 dark:bg-primary dark:text-white dark:hover:bg-primary/90"
                            onClick={() => {
                              console.log("Button clicked");
                              console.log("Form values:", form.getValues());
                              console.log("Form errors:", form.formState.errors);
                              form.handleSubmit(onSubmit)();
                            }}
                            disabled={generateContentMutation.isPending}
                          >
                            {generateContentMutation.isPending ? (
                              <div className="flex items-center">
                                <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                {tDb("common.generating")}
                              </div>
                            ) : (
                              t("dashboard.create.generateContent")
                            )}
                          </Button>
                        </div>
                      </div>
                    </form>
                  </Form>
                  
                  {/* Generated Content section is now hidden - content is automatically saved and shown in edit dialog */}
                </div>
              </div>
            </Tabs>
          </CardContent>
        </Card>
        
        {/* Dialog for editing content */}
        <Dialog open={isContentDialogOpen} onOpenChange={setIsContentDialogOpen}>
          <DialogContent className="sm:max-w-[900px] max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>Ch·ªânh s·ª≠a n·ªôi dung</DialogTitle>
              <DialogDescription>
                S·ª≠ d·ª•ng tr√¨nh so·∫°n th·∫£o ƒë·ªÉ ƒë·ªãnh d·∫°ng n·ªôi dung tr∆∞·ªõc khi l∆∞u ho·∫∑c xu·∫•t b·∫£n l√™n website c·ªßa b·∫°n.
                Thanh c√¥ng c·ª• ph√≠a tr√™n cho ph√©p b·∫°n th√™m ƒë·ªãnh d·∫°ng, li√™n k·∫øt v√† h√¨nh ·∫£nh.
              </DialogDescription>
            </DialogHeader>
            
            <div className="grid gap-4 py-4">
              {/* Ti√™u ƒë·ªÅ b√†i vi·∫øt */}
              <div className="grid gap-2">
                <Label htmlFor="title" className="font-medium">Ti√™u ƒë·ªÅ b√†i vi·∫øt</Label>
                <Input 
                  id="title" 
                  value={editedTitle}
                  onChange={(e) => setEditedTitle(e.target.value)}
                  className="w-full p-2 border border-gray-300 rounded-md focus:border-primary"
                  placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i vi·∫øt..."
                />
              </div>
              
              {/* Content editing with rich text editor */}
              <div className="grid gap-2">
                <Label htmlFor="content">N·ªôi dung</Label>
                <div className="quill-editor-container">
                  <ReactQuill 
                    theme="snow"
                    value={editedContent} 
                    onChange={setEditedContent}
                    modules={{
                      toolbar: [
                        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                        ['bold', 'italic', 'underline', 'strike'],
                        [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                        [{ 'indent': '-1'}, { 'indent': '+1' }],
                        [{ 'color': [] }, { 'background': [] }],
                        ['link', 'image'],
                        ['clean']
                      ],
                    }}
                  />
                </div>
              </div>
            </div>
            
            <DialogFooter className="flex flex-col sm:flex-row gap-2">
              <Button 
                variant="outline" 
                onClick={() => setIsContentDialogOpen(false)}
                className="sm:order-1"
              >
                H·ªßy
              </Button>
              

              <Button 
                onClick={handleSaveArticle}
                variant="secondary"
                className="sm:order-2"
                disabled={isSavingArticle}
              >
                {isSavingArticle 
                  ? (generatedContent?.articleId ? "ƒêang c·∫≠p nh·∫≠t..." : "ƒêang l∆∞u...") 
                  : (generatedContent?.articleId ? "C·∫≠p nh·∫≠t b√†i vi·∫øt" : "L∆∞u b√†i vi·∫øt")
                }
              </Button>
              
              {/* T·∫°m ·∫©n n√∫t xu·∫•t b·∫£n theo y√™u c·∫ßu */}
              {/* <Button 
                onClick={handlePublishContent}
                variant="default"
                className="sm:order-3 bg-accent-500 hover:bg-accent-600"
              >
                Xu·∫•t b·∫£n l√™n website
              </Button> */}
            </DialogFooter>
          </DialogContent>
        </Dialog>

        {/* Credit Confirmation Modal */}
        {pendingFormData && (
          <CreditConfirmationModal
            isOpen={showCreditModal}
            onClose={() => {
              setShowCreditModal(false);
              setPendingFormData(null);
            }}
            onConfirm={confirmAndSubmit}
            title={t('credit.modal.title.content', 'X√°c nh·∫≠n t·∫°o n·ªôi dung AI', 'Confirm AI Content Creation')}
            breakdown={calculateCreditBreakdown(pendingFormData).breakdown}
            totalCredits={calculateCreditBreakdown(pendingFormData).totalCredits}
            userCurrentCredits={user?.credits || 0}
            isLoading={generateContentMutation.isPending}
          />
        )}
      </DashboardLayout>
    </>
  );
}