import { useState } from "react";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Loader2, RotateCcw, Clock, User, Settings, Filter } from "lucide-react";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { apiRequest } from "@/lib/queryClient";
import { format } from "date-fns";

interface AppearanceHistory {
  id: number;
  settingId: number;
  oldValue: string;
  newValue: string;
  changedBy: string;
  changedAt: string;
  setting: {
    type: string;
    key: string;
    language: string;
  };
  user: {
    username: string;
    email: string;
  };
}

export default function ChangeHistory() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [selectedSetting, setSelectedSetting] = useState<string>("all");

  // Fetch history
  const { data: history, isLoading } = useQuery({
    queryKey: ['/api/admin/appearance/history', selectedSetting],
    queryFn: () => {
      const params = selectedSetting !== "all" ? `?settingId=${selectedSetting}` : '';
      return apiRequest('GET', `/api/admin/appearance/history${params}`);
    },
  });

  // Restore mutation
  const restoreMutation = useMutation({
    mutationFn: async (historyId: number) => {
      return apiRequest('POST', `/api/admin/appearance/restore/${historyId}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/admin/appearance'] });
      toast({
        title: "Kh√¥i ph·ª•c th√†nh c√¥ng",
        description: "C√†i ƒë·∫∑t ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c v·ªÅ phi√™n b·∫£n tr∆∞·ªõc",
      });
    },
    onError: (error: any) => {
      toast({
        title: "C√≥ l·ªói x·∫£y ra",
        description: error.message || "Kh√¥ng th·ªÉ kh√¥i ph·ª•c c√†i ƒë·∫∑t",
        variant: "destructive",
      });
    },
  });

  const handleRestore = async (historyId: number, settingKey: string) => {
    if (window.confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën kh√¥i ph·ª•c c√†i ƒë·∫∑t "${settingKey}" v·ªÅ phi√™n b·∫£n n√†y?`)) {
      await restoreMutation.mutateAsync(historyId);
    }
  };

  const getSettingTypeLabel = (type: string) => {
    switch (type) {
      case 'seo_meta': return 'SEO Meta';
      case 'header': return 'Header';
      case 'login_page': return 'Login Page';
      case 'footer': return 'Footer';
      default: return type;
    }
  };

  const getSettingKeyLabel = (key: string) => {
    switch (key) {
      case 'site_title': return 'Ti√™u ƒë·ªÅ trang';
      case 'site_description': return 'M√¥ t·∫£ trang';
      case 'site_keywords': return 'T·ª´ kh√≥a SEO';
      case 'logo_url': return 'URL Logo';
      case 'site_name': return 'T√™n trang';
      case 'login_logo_url': return 'Logo ƒëƒÉng nh·∫≠p';
      case 'title': return 'Ti√™u ƒë·ªÅ';
      case 'welcome_text': return 'VƒÉn b·∫£n ch√†o m·ª´ng';
      case 'copyright': return 'B·∫£n quy·ªÅn';
      default: return key;
    }
  };

  const truncateText = (text: string, maxLength: number = 50) => {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + '...';
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-8">
        <Loader2 className="h-6 w-6 animate-spin" />
        <span className="ml-2">ƒêang t·∫£i l·ªãch s·ª≠...</span>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Filter */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Filter className="h-4 w-4" />
            B·ªô l·ªçc
          </CardTitle>
          <CardDescription>
            L·ªçc l·ªãch s·ª≠ thay ƒë·ªïi theo lo·∫°i c√†i ƒë·∫∑t
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            <Select value={selectedSetting} onValueChange={setSelectedSetting}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Ch·ªçn lo·∫°i c√†i ƒë·∫∑t" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">T·∫•t c·∫£ c√†i ƒë·∫∑t</SelectItem>
                <SelectItem value="seo_meta">SEO Meta Tags</SelectItem>
                <SelectItem value="header">Header & Branding</SelectItem>
                <SelectItem value="login_page">Trang ƒëƒÉng nh·∫≠p</SelectItem>
                <SelectItem value="footer">Footer Content</SelectItem>
              </SelectContent>
            </Select>
            
            {selectedSetting !== "all" && (
              <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                ƒêang l·ªçc: {getSettingTypeLabel(selectedSetting)}
              </Badge>
            )}
          </div>
        </CardContent>
      </Card>

      {/* History List */}
      <Card>
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2">
            <Clock className="h-4 w-4" />
            L·ªãch s·ª≠ thay ƒë·ªïi
          </CardTitle>
          <CardDescription>
            Danh s√°ch c√°c thay ƒë·ªïi g·∫ßn ƒë√¢y, click "Kh√¥i ph·ª•c" ƒë·ªÉ quay v·ªÅ phi√™n b·∫£n tr∆∞·ªõc
          </CardDescription>
        </CardHeader>
        <CardContent>
          {!history || !Array.isArray(history) || history.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <Clock className="h-12 w-12 mx-auto mb-4 opacity-50" />
              <p>Ch∆∞a c√≥ l·ªãch s·ª≠ thay ƒë·ªïi n√†o</p>
            </div>
          ) : (
            <div className="space-y-4">
              {history.map((entry: AppearanceHistory) => (
                <div
                  key={entry.id}
                  className="border rounded-lg p-4 hover:bg-gray-50 transition-colors"
                >
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-2 mb-2">
                        <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                          {getSettingTypeLabel(entry.setting.type)}
                        </Badge>
                        <Badge variant="outline" className="bg-gray-50 text-gray-700 border-gray-200">
                          {getSettingKeyLabel(entry.setting.key)}
                        </Badge>
                        <Badge variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
                          {entry.setting.language === 'vi' ? 'üáªüá≥' : 'üá∫üá∏'} {entry.setting.language}
                        </Badge>
                      </div>

                      <div className="space-y-2 text-sm">
                        <div>
                          <span className="font-medium text-red-600">C≈©:</span>
                          <span className="ml-2 text-gray-600">
                            {entry.oldValue ? truncateText(entry.oldValue) : '(tr·ªëng)'}
                          </span>
                        </div>
                        <div>
                          <span className="font-medium text-green-600">M·ªõi:</span>
                          <span className="ml-2 text-gray-900">
                            {entry.newValue ? truncateText(entry.newValue) : '(tr·ªëng)'}
                          </span>
                        </div>
                      </div>

                      <div className="flex items-center gap-4 mt-3 text-xs text-muted-foreground">
                        <div className="flex items-center gap-1">
                          <User className="h-3 w-3" />
                          {entry.user?.username || 'Unknown'}
                        </div>
                        <div className="flex items-center gap-1">
                          <Clock className="h-3 w-3" />
                          {format(new Date(entry.changedAt), 'dd/MM/yyyy HH:mm')}
                        </div>
                      </div>
                    </div>

                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleRestore(entry.id, entry.setting.key)}
                      disabled={restoreMutation.isPending}
                      className="ml-4"
                    >
                      {restoreMutation.isPending ? (
                        <Loader2 className="h-3 w-3 animate-spin" />
                      ) : (
                        <>
                          <RotateCcw className="h-3 w-3 mr-1" />
                          Kh√¥i ph·ª•c
                        </>
                      )}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Info */}
      <Card className="bg-blue-50 border-blue-200">
        <CardHeader>
          <CardTitle className="text-lg flex items-center gap-2 text-blue-800">
            <Settings className="h-4 w-4" />
            L∆∞u √Ω
          </CardTitle>
        </CardHeader>
        <CardContent className="text-blue-700">
          <ul className="space-y-1 text-sm">
            <li>‚Ä¢ L·ªãch s·ª≠ thay ƒë·ªïi ƒë∆∞·ª£c l∆∞u t·ª± ƒë·ªông khi b·∫°n c·∫≠p nh·∫≠t b·∫•t k·ª≥ c√†i ƒë·∫∑t n√†o</li>
            <li>‚Ä¢ B·∫°n c√≥ th·ªÉ kh√¥i ph·ª•c v·ªÅ b·∫•t k·ª≥ phi√™n b·∫£n n√†o trong l·ªãch s·ª≠</li>
            <li>‚Ä¢ Vi·ªác kh√¥i ph·ª•c s·∫Ω t·∫°o ra m·ªôt m·ª•c l·ªãch s·ª≠ m·ªõi</li>
            <li>‚Ä¢ L·ªãch s·ª≠ c≈© s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông x√≥a sau 90 ng√†y ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng</li>
          </ul>
        </CardContent>
      </Card>
    </div>
  );
}